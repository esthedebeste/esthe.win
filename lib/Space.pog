canvas(aria-hidden="true" data-fragment-shader=(fragmentShader) data-vertex-shader=(vertexShader)) with script {
	function hueToRgb(h) {
		function tToRgb(t) {
			if (t < 0) t += 1
			if (t > 1) t -= 1
			if (t < 1 / 6) return 6 * t
			if (t < 1 / 2) return 1
			if (t < 2 / 3) return 4 - 6 * t
			return 0
		}

		const r = tToRgb(h + 1 / 3)
		const g = tToRgb(h)
		const b = tToRgb(h - 1 / 3)
		return [r, g, b]
	}

	let width = 1080
	let height = 1920
	function resizeHandler() {
		width = canvas.width = window.innerWidth
		height = canvas.height = window.innerHeight
	}
	window.addEventListener("resize", resizeHandler)
	resizeHandler()
	const frag = dataset.fragmentShader
	const vert = dataset.vertexShader
	const scale = 5

	const goalFps = 24
	const minFps = 15
	const goalFrameTime = 1000 / goalFps

	function createGlShader(gl, type, glsl) {
		let shader = gl.createShader(type)
		if (!shader) throw new Error("no shader")
		gl.shaderSource(shader, glsl)
		gl.compileShader(shader)
		if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
			console.log(gl.getShaderInfoLog(shader))
			gl.deleteShader(shader)
			throw new Error("shader compile error")
		}
		return shader
	}
	const gl = canvas.getContext("webgl")
	if (!gl) throw new Error("no webgl")

	const vertShader = createGlShader(gl, gl.VERTEX_SHADER, vert)
	const fragShader = createGlShader(gl, gl.FRAGMENT_SHADER, frag)
	const program = gl.createProgram()
	if (!program) throw new Error("no program")
	gl.attachShader(program, vertShader)
	gl.attachShader(program, fragShader)
	gl.linkProgram(program)
	if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
		console.error(gl.getProgramInfoLog(program))
		gl.deleteProgram(program)
		throw new Error("program link error")
	}

	const locations = {
		a_position: gl.getAttribLocation(program, "a_position"),
		iTime: gl.getUniformLocation(program, "iTime"),
		iScale: gl.getUniformLocation(program, "iScale"),
		iDetail: gl.getUniformLocation(program, "iDetail"),
		iResolution: gl.getUniformLocation(program, "iResolution"),
		iColorMultiplier: gl.getUniformLocation(program, "iColorMultiplier"),
		iColorOffset: gl.getUniformLocation(program, "iColorOffset"),
	}

	const positionBuffer = gl.createBuffer()
	gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer)
	gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-4, -4, +4, -4, 0, +4]), gl.STATIC_DRAW)

	const START_TIME = Date.now()
	let pTime = 0
	let animId = requestAnimationFrame(draw)
	let DETAIL = 5
	let LAST_DETAIL_CHANGE = 0
	let drew = []
	let VISIBLE_TIME = +(document.visibilityState === "visible")
	let HIDDEN_TIME = +(document.visibilityState === "hidden")
	document.addEventListener("visibilitychange", () => {
		const t = Date.now() - START_TIME
		if(document.visibilityState === "visible")
			VISIBLE_TIME = t
		else
			HIDDEN_TIME = t
	})
	function draw(time) {
		animId = requestAnimationFrame(draw)
		const frameTime = time - pTime
		if (frameTime < goalFrameTime) return
		while(drew[0] < time - 1000) drew.shift() // remove old frames
		drew.push(time)
		const FPS = drew.length
		if(FPS < minFps && time - LAST_DETAIL_CHANGE > 1000 && VISIBLE_TIME > HIDDEN_TIME && time - VISIBLE_TIME > 2000) {
			DETAIL = Math.max(0, DETAIL - 1)
			LAST_DETAIL_CHANGE = time
			console.log("lowering detail to", DETAIL, "at", time, "because fps is", FPS)
		}
		pTime = time
		if (!gl) throw new Error("no webgl")
		const w = width
		const h = height
		gl.viewport(0, 0, w, h)
		gl.useProgram(program)
		gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer)
		gl.vertexAttribPointer(locations.a_position, 2, gl.FLOAT, false, 0, 0)
		gl.enableVertexAttribArray(locations.a_position)

		const timeOffset = (time + START_TIME) / 1000 * 25 % 360
		const col = hueToRgb(timeOffset / 360)
		const [ro, go, bo] = col.map(x => x * 0.02)
		const [rm, gm, bm] = col.map(x => x * 0.2)
		gl.uniform1f(locations.iTime, time * 1e-3 * 0.1 + 0.5)
		gl.uniform1f(locations.iScale, scale)
		gl.uniform1i(locations.iDetail, DETAIL)
		gl.uniform2f(locations.iResolution, w, h)
		gl.uniform3f(locations.iColorOffset, ro, go, bo)
		gl.uniform3f(locations.iColorMultiplier, rm, gm, bm)

		gl.drawArrays(gl.TRIANGLES, 0, 3)
	}

	// function onElementRemoved(element, callback) {
	// 	new MutationObserver(function(mutations) {
	// 		if(!document.body.contains(element)) {
	// 			callback();
	// 			this.disconnect();
	// 		}
	// 	}).observe(element.parentElement, {childList: true})
	// }
	// onElementRemoved(canvas, () => {
	// 	document.removeEventListener("resize", resizeHandler)
	// 	cancelAnimationFrame(animId)
	// })
}